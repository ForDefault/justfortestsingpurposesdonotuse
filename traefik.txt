version: "3.9"

networks:
  default:
    driver: bridge
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
 
services:

  traefik:
    container_name: traefik
    image: traefik:2.9.6
    security_opt:
      - no-new-privileges:true
    restart: always
    command: # CLI arguments
        - --global.checkNewVersion=true
        #- --global.sendAnonymousUsage=true
        - --entryPoints.http.address=:80
        - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
        #- --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
        - --entryPoints.traefik.address=:8080
        - --metrics.prometheus=true
        - --api=true
        - --api.insecure=true
        - --api.dashboard=true
        # - --serversTransport.insecureSkipVerify=true
        - --log=true
        - --log.filePath=/logs/traefik.log
        - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
        - --accessLog=true
        - --accessLog.filePath=/logs/access.log
        - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
        - --accessLog.filters.statusCodes=204-299,400-499,500-599
        - --providers.docker=true
        #- --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
        - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
        - --providers.docker.exposedByDefault=false
        - --entrypoints.https.http.tls.options=tls-opts@file
        # Add cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
        - --entrypoints.https.http.tls.certresolver=cloudflare
        - --entrypoints.https.http.tls.domains[0].main=${DOMAIN}
        - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAIN}
        # - --entrypoints.https.http.tls.domains[1].main=${DOMAIN2} # Pulls main cert for second domain
        # - --entrypoints.https.http.tls.domains[1].sans=*.${DOMAIN2} # Pulls wildcard cert for second domain
        - --providers.docker.network=t2_proxy
        - --providers.docker.swarmMode=false
        - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
        #- --providers.file.filename=/rules/middlewares.yml # Load dynamic configuration from a file
        - --providers.file.watch=true # Only works on top level files in the rules folder
        #- --certificatesResolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
        - --certificatesResolvers.cloudflare.acme.email=${ACMEMAIL}
        - --certificatesResolvers.cloudflare.acme.storage=/acme.json
        - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
        - --certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
        - --certificatesResolvers.cloudflare.acme.dnsChallenge.delayBeforeCheck=60 # To delay DNS check and reduce LE hitrate
#        - --certificatesResolvers.cloudflare.acme.dnschallenge.disablepropagationcheck=true
        #  Disable SSL certificate verification. (Default: false)
        - --serverstransport.insecureskipverify=true
        - --experimental.plugins.geoblock.modulename=github.com/PascalMinder/geoblock
        - --experimental.plugins.geoblock.version=v0.2.3
    networks:
        t2_proxy:
            ipv4_address: 192.168.90.254 # You can specify a static IP
        socket_proxy:       
    ports:
        - target: 80
          published: 80
          protocol: tcp
          mode: host
        - target: 443
          published: 443
          protocol: tcp
          mode: host
        - target: 8080 # insecure api wont work
          published: 8080
          protocol: tcp
          mode: host
    volumes:
        - ${APPDIR}/traefik2/rules/cloudserver:/rules # file provider directory
       # - ${DOCSOCK}:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
        - ${APPDIR}/traefik2/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
        - ${LOGDIR}/cloudserver/traefik:/logs # for fail2ban or crowdsec
        - ${SHAREDIR}:/shared	
      # - ${APPDIR}/traefik2/plugin/geoblock:/plugins-local/src/github.com/PascalMinder/geoblock/
    environment:
        - ${TZ}
        - CF_API_EMAIL_FILE=/run/secrets/cf_email
        - CF_API_KEY_FILE=/run/secrets/cf_api_key
    secrets:
        - cf_email
        - cf_api_key   
    labels:
        - "traefik.enable=true"
    # HTTP-to-HTTPS Redirect
        - "traefik.http.routers.http-catchall.entrypoints=http"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    # HTTP Routers
        - "traefik.http.routers.traefik-rtr.entrypoints=https"
        - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN}`)"
        - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
#        - "traefik.http.routers.traefik-rtr.tls.certresolver=cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN}"
        - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN}"
        # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=${DOMAIN2}" # Pulls main cert for second domain
        # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.${DOMAIN2}" # Pulls wildcard cert for second domain
    ## Services - API
        - "traefik.http.routers.traefik-rtr.service=api@internal"
    ## Middlewares
        - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  organizr:
    image: organizr/organizr
    container_name: organizr
    security_opt:
      - no-new-privileges:true
    restart: always
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.253   
    volumes:
      - ${APPDIR}/organizr:/config
    environment:
      - ${PUID}
      - ${PGID}
      - ${TZ}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`${DOMAIN}`,`www.${DOMAIN}`)"
      - "traefik.http.routers.organizr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  oauth:
    image: thomseddon/traefik-forward-auth:latest
    container_name: oauth
    security_opt:
      - no-new-privileges:true
    restart: always
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.252  
    environment:
      - CONFIG=/config
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.${DOMAIN}
      - URL_PATH=/_oauth
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=${OAUTH}
      - COOKIE_DOMAIN=${DOMAIN}              
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
        - "traefik.enable=true"
        ## HTTP Routers
        - "traefik.http.routers.oauth-rtr.tls=true"
        - "traefik.http.routers.oauth-rtr.entrypoints=https"
        - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.${DOMAIN}`)"
        ## Middlewares
        - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
        ## HTTP Services
        - "traefik.http.routers.oauth-rtr.service=oauth-svc"
        - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181" 

# Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
    ## Revoked by Default
    # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=0 # Watchtower
    # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # CrowdSec - the open-source & participative IPS.
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    security_opt:
      - no-new-privileges:true
    restart: always
    networks:
      - t2_proxy 
    ports:
      - "$CROWDSEC_API_PORT:8080"
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux crowdsecurity/nginx crowdsecurity/sshd"
      GID: "${GID-1000}"
    depends_on:
      - traefik
    volumes:
      - ${LOGDIR}/cloudserver/traefik:/logs/web/traefik:ro
      - ${LOGDIR}/crowdsec:/var/log/
      - /var/log:/var/log:ro
      - ${APPDIR}/crowdsec/db:/var/lib/crowdsec/data/
      - ${APPDIR}/crowdsec/config:/etc/crowdsec/    

  traefik-bouncer:
    image: fbonalair/traefik-crowdsec-bouncer
    container_name: traefik-bouncer
    environment:
      GIN_MODE: release # default is debug (more logs)
      CROWDSEC_BOUNCER_API_KEY: ${CSBOUNCERAPI}
      CROWDSEC_AGENT_HOST: crowdsec:8080
    expose:
      - 8080
    networks:
      - t2_proxy 

secrets:
   cf_email:
     file: ${SECRETS}/cf_email
   cf_api_key:
     file: ${SECRETS}/cf_api_key
   traefik_forward_auth:
     file: ${SECRETS}/traefik_forward_auth       
